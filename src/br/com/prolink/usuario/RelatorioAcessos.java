/*
 * Todos direitos reservados a Tiago Dias de Souza
 * www.github.com/tiagods
 */
package br.com.prolink.usuario;

import br.com.prolink.inicio.ConexaoStatement;
import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import jxl.Workbook;
import jxl.WorkbookSettings;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author User
 */
public class RelatorioAcessos extends javax.swing.JInternalFrame {
    
    private String ordem=" desc";
    private String usuario="", cliente="", menu="", departamento="";
    
    /**
     * Creates new form RelatorioAcessos
     */
    public RelatorioAcessos() {
        initComponents();
        
        rbCrescente.setSelected(true);
        if(tratarData())
            preencher_jtable();
        preencherCombo(cbUsuario, "Usuario");
        preencherCombo(cbMenu, "Menu");
        preencherCombo(cbCliente, "Cliente");
        preencherCombo(cbDepartamento, "Departamento");

        tb_acesso.setAutoCreateRowSorter(true);        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgOrdenação = new javax.swing.ButtonGroup();
        jDkBody = new javax.swing.JDesktopPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        data1 = new com.michaelbaranov.microba.calendar.DatePicker();
        data2 = new com.michaelbaranov.microba.calendar.DatePicker();
        cbUsuario = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cbCliente = new javax.swing.JComboBox<>();
        cbDepartamento = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        lbTitulo = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnFechar = new javax.swing.JButton();
        btExport = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tb_acesso = new javax.swing.JTable();
        btnOk = new javax.swing.JButton();
        cbOrganizar = new javax.swing.JComboBox<>();
        rbCrescente = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        rbDecrescente = new javax.swing.JRadioButton();
        cbMenu = new javax.swing.JComboBox<>();
        jDesktopPane1 = new javax.swing.JDesktopPane();

        setBackground(new java.awt.Color(250, 250, 250));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(1148, 600));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });

        jDkBody.setBackground(new java.awt.Color(250, 250, 250));

        jLabel1.setText("Organizar por:");

        jLabel2.setText("Periodo:");

        data1.setShowNoneButton(false);

        data2.setShowNoneButton(false);

        cbUsuario.setBackground(new java.awt.Color(250, 250, 250));
        cbUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbUsuarioActionPerformed(evt);
            }
        });

        jLabel3.setText("Usuario:");

        jLabel4.setText("Cliente:");

        cbCliente.setBackground(new java.awt.Color(250, 250, 250));
        cbCliente.setToolTipText("");
        cbCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClienteActionPerformed(evt);
            }
        });

        cbDepartamento.setBackground(new java.awt.Color(250, 250, 250));
        cbDepartamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDepartamentoActionPerformed(evt);
            }
        });

        jLabel6.setText("Departamento:");

        lbTitulo.setFont(new java.awt.Font("Verdana", 1, 22)); // NOI18N
        lbTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitulo.setText("Histórico de Atualizações");

        jLabel7.setText("até");

        btnFechar.setText("Fechar");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        btExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/prolink/imagens/excel_icon.png"))); // NOI18N
        btExport.setText("Exportar");
        btExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(245, 245, 245));
        jScrollPane1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        tb_acesso.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "ID", "Cliente", "Hora", "Usuario", "Departamento", "Acao", "Menu", "Tela", "Detalhes"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tb_acesso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tb_acessoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tb_acesso);
        if (tb_acesso.getColumnModel().getColumnCount() > 0) {
            tb_acesso.getColumnModel().getColumn(0).setPreferredWidth(70);
            tb_acesso.getColumnModel().getColumn(0).setMaxWidth(70);
            tb_acesso.getColumnModel().getColumn(1).setPreferredWidth(70);
            tb_acesso.getColumnModel().getColumn(1).setMaxWidth(70);
            tb_acesso.getColumnModel().getColumn(2).setPreferredWidth(80);
            tb_acesso.getColumnModel().getColumn(2).setMaxWidth(100);
            tb_acesso.getColumnModel().getColumn(3).setPreferredWidth(70);
            tb_acesso.getColumnModel().getColumn(3).setMaxWidth(70);
            tb_acesso.getColumnModel().getColumn(4).setPreferredWidth(60);
            tb_acesso.getColumnModel().getColumn(4).setMaxWidth(80);
            tb_acesso.getColumnModel().getColumn(5).setPreferredWidth(70);
            tb_acesso.getColumnModel().getColumn(5).setMaxWidth(90);
            tb_acesso.getColumnModel().getColumn(6).setPreferredWidth(60);
            tb_acesso.getColumnModel().getColumn(6).setMaxWidth(80);
            tb_acesso.getColumnModel().getColumn(7).setPreferredWidth(60);
            tb_acesso.getColumnModel().getColumn(7).setMaxWidth(90);
            tb_acesso.getColumnModel().getColumn(8).setPreferredWidth(80);
            tb_acesso.getColumnModel().getColumn(8).setMaxWidth(100);
        }

        btnOk.setText("OK");
        btnOk.setToolTipText("Por segurança esse botão foi desativado");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        cbOrganizar.setBackground(new java.awt.Color(250, 250, 250));
        cbOrganizar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Data", "Cliente", "Departamento", "Acao", "Menu", "Tela", "Hora", "Usuario" }));
        cbOrganizar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                cbOrganizarFocusLost(evt);
            }
        });
        cbOrganizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbOrganizarActionPerformed(evt);
            }
        });

        rbCrescente.setBackground(new java.awt.Color(250, 250, 250));
        bgOrdenação.add(rbCrescente);
        rbCrescente.setText("Crescente");
        rbCrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCrescenteActionPerformed(evt);
            }
        });

        jLabel5.setText("Menu:");

        rbDecrescente.setBackground(new java.awt.Color(250, 250, 250));
        bgOrdenação.add(rbDecrescente);
        rbDecrescente.setText("Decrescente");
        rbDecrescente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDecrescenteActionPerformed(evt);
            }
        });

        cbMenu.setBackground(new java.awt.Color(250, 250, 250));
        cbMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMenuActionPerformed(evt);
            }
        });

        final JInternalFrame internalFrame = GraficoLinha("Ultimos Historicos");
        internalFrame.setBorder(null);
        jDesktopPane1.add(internalFrame);
        internalFrame.pack();
        internalFrame.setVisible(true);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 646, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jDkBody.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(data1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(data2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(cbUsuario, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(cbCliente, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(cbDepartamento, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(lbTitulo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(btnFechar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(btExport, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(btnOk, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(cbOrganizar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(rbCrescente, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(rbDecrescente, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(cbMenu, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDkBody.setLayer(jDesktopPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDkBodyLayout = new javax.swing.GroupLayout(jDkBody);
        jDkBody.setLayout(jDkBodyLayout);
        jDkBodyLayout.setHorizontalGroup(
            jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDkBodyLayout.createSequentialGroup()
                .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDkBodyLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jDkBodyLayout.createSequentialGroup()
                                .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jDkBodyLayout.createSequentialGroup()
                                        .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel4))
                                        .addGap(43, 43, 43)
                                        .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jDkBodyLayout.createSequentialGroup()
                                                .addComponent(cbOrganizar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(rbCrescente)
                                                .addGap(18, 18, 18)
                                                .addComponent(rbDecrescente))
                                            .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(cbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jDkBodyLayout.createSequentialGroup()
                                                .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(jDkBodyLayout.createSequentialGroup()
                                                        .addComponent(data1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(jLabel7)))
                                                .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(jDkBodyLayout.createSequentialGroup()
                                                        .addGap(24, 24, 24)
                                                        .addComponent(jLabel6)
                                                        .addGap(34, 34, 34)
                                                        .addComponent(cbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(jDkBodyLayout.createSequentialGroup()
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(data2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDkBodyLayout.createSequentialGroup()
                                        .addGap(215, 215, 215)
                                        .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btExport, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnFechar)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1138, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jDkBodyLayout.setVerticalGroup(
            jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDkBodyLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jDkBodyLayout.createSequentialGroup()
                        .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cbOrganizar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbCrescente)
                            .addComponent(rbDecrescente))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(data1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(data2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(cbUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDkBodyLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDkBodyLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addGroup(jDkBodyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                                    .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btExport)))))
                    .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDkBody)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDkBody, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        setBounds(0, 0, 1148, 600);
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        this.setLocation(0,0);
    }//GEN-LAST:event_formComponentMoved

    private void cbUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbUsuarioActionPerformed
        if(cbUsuario.getSelectedItem().equals("Todos")){
            usuario="";
            if(tratarData())
            preencher_jtable();
        }
        else{
            usuario="and Usuario='"+cbUsuario.getSelectedItem()+"' ";
            if(tratarData())
            preencher_jtable();
        }
    }//GEN-LAST:event_cbUsuarioActionPerformed

    private void cbClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClienteActionPerformed
        if(cbCliente.getSelectedItem().equals("Todos")){
            cliente="";
            if(tratarData())
            preencher_jtable();
        }
        else{
            cliente="and Cliente='"+cbCliente.getSelectedItem()+"' ";
            if(tratarData())
            preencher_jtable();
        }
    }//GEN-LAST:event_cbClienteActionPerformed

    private void cbDepartamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDepartamentoActionPerformed
        if(cbDepartamento.getSelectedItem().equals("Todos")){
            departamento="";
            if(tratarData())
            preencher_jtable();
        }
        else{
            departamento="and Departamento='"+cbDepartamento.getSelectedItem()+"' ";
            if(tratarData())
            preencher_jtable();
        }
    }//GEN-LAST:event_cbDepartamentoActionPerformed

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        dispose();
    }//GEN-LAST:event_btnFecharActionPerformed

    private void btExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportActionPerformed
        if(tratarData()){
            Connection con = new ConexaoStatement().getConnetion();
            ResultSet rs = pegaValores(con);
            if(rs!=null){
                String diretorio="";
                JFileChooser chooser = new JFileChooser();
                chooser.setAcceptAllFileFilterUsed(false);
                chooser.setDialogTitle("Criando Planilha");
                chooser.addChoosableFileFilter(new FileNameExtensionFilter("Planilha do Excel (.xls)",".xls"));

                int retorno = chooser.showSaveDialog(null);
                if(retorno == JFileChooser.APPROVE_OPTION){
                    diretorio = chooser.getSelectedFile().getAbsolutePath();
                }
                if(!diretorio.equals("")){
                    File file = new File(diretorio+".xls");
                    //formato fonte para impressão
                    WritableFont wf = new WritableFont(WritableFont.ARIAL, 12, WritableFont.NO_BOLD);
                    WritableCellFormat cf = new WritableCellFormat(wf);

                    WritableSheet excelSheet = null;
                    WritableWorkbook workbook = null;

                    //habilitando configuração
                    WorkbookSettings wbSettings =  new WorkbookSettings();
                    wbSettings.setLocale(new Locale("en", "EN"));
                    try{
                        workbook = Workbook.createWorkbook(file, wbSettings);
                        workbook.createSheet("Resumo", 0);
                        excelSheet = workbook.getSheet(0);
                    }catch(IOException e){
                        System.out.println(""+e);
                    }

                    //pegando resultado e escrevendo na planilha

                    try{
                        int row=0;
                        excelSheet.addCell(new Label(0, row, "Data", cf));
                        excelSheet.addCell(new Label(1, row, "Apelido", cf));
                        excelSheet.addCell(new Label(2, row, "Cliente", cf));
                        excelSheet.addCell(new Label(3, row, "Hora", cf));
                        excelSheet.addCell(new Label(4, row, "Usuario", cf));
                        excelSheet.addCell(new Label(5, row, "Departamento", cf));
                        excelSheet.addCell(new Label(6, row, "Acao", cf));
                        excelSheet.addCell(new Label(7, row, "Menu", cf));
                        excelSheet.addCell(new Label(8, row, "Tela", cf));
                        excelSheet.addCell(new Label(9, row, "Descricao", cf));
                        row=1;
                        while(rs.next()){
                            Label lbData = new Label( 0 , row, formatarData(rs.getDate("Data")) , cf );
                            Label lbId = new Label( 1 , row, rs.getString("Apelido"),cf);
                            Label lbCliente  = new Label( 2 , row, rs.getString("Cliente"),cf);
                            Label lbHora= new Label( 3 , row, formatarHora(rs.getString("Hora")),cf );
                            Label lbUsuario= new Label( 4 , row, rs.getString("Usuario"),cf);
                            Label lbDepartamento= new Label( 5 , row, rs.getString("Departamento"),cf );
                            Label lbAcao= new Label( 6 , row, rs.getString("Acao"),cf);
                            Label lbMenu= new Label( 7 , row, rs.getString("Menu"),cf);
                            Label lbTela= new Label( 8 , row, rs.getString("Tela"),cf);
                            Label lbDetalhes = new Label( 9 , row, rs.getString("Descricao"),cf);
                            row++;
                            try{
                                excelSheet.addCell(lbData);
                                excelSheet.addCell(lbId);
                                excelSheet.addCell(lbCliente);
                                excelSheet.addCell(lbHora);
                                excelSheet.addCell(lbUsuario);
                                excelSheet.addCell(lbDepartamento);
                                excelSheet.addCell(lbAcao);
                                excelSheet.addCell(lbMenu);
                                excelSheet.addCell(lbTela);
                                excelSheet.addCell(lbDetalhes);
                            }catch(WriteException e){
                                e.printStackTrace();
                            }
                        }
                        rs.close();
                        workbook.write();
                        workbook.close();
                    } catch(SQLException e){
                        e.printStackTrace();
                    } catch (WriteException ex) {
                        ex.printStackTrace();
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }

                }
            }
            else
            JOptionPane.showMessageDialog(null, "Não existe nenhum registro a ser exportado");
            try{con.close();}catch(SQLException e){}
        }

    }//GEN-LAST:event_btExportActionPerformed

    private void tb_acessoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tb_acessoMouseClicked

    }//GEN-LAST:event_tb_acessoMouseClicked

    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOkActionPerformed
        if(tratarData())
        preencher_jtable();
    }//GEN-LAST:event_btnOkActionPerformed

    private void cbOrganizarFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cbOrganizarFocusLost

    }//GEN-LAST:event_cbOrganizarFocusLost

    private void cbOrganizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbOrganizarActionPerformed
        if(tratarData())
        preencher_jtable();
    }//GEN-LAST:event_cbOrganizarActionPerformed

    private void rbCrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCrescenteActionPerformed
        if(rbCrescente.isSelected()){
            ordem = "";
            if(tratarData())
                preencher_jtable();
        }
    }//GEN-LAST:event_rbCrescenteActionPerformed

    private void rbDecrescenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDecrescenteActionPerformed
        if(rbDecrescente.isSelected()){
            ordem=" desc";
            if(tratarData())
                preencher_jtable();
        }
    }//GEN-LAST:event_rbDecrescenteActionPerformed

    private void cbMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMenuActionPerformed
        if(cbMenu.getSelectedItem().equals("Todos")){
            menu="";
            if(tratarData())
                preencher_jtable();
        }
        else{
            menu="and Menu='"+cbMenu.getSelectedItem()+"' ";
            if(tratarData())
                preencher_jtable();
        }
    }//GEN-LAST:event_cbMenuActionPerformed
    private void preencherCombo(JComboBox combobox, String campo){
        Connection con=null;
        try{
            con = new ConexaoStatement().getConnetion();
            PreparedStatement ps = con.prepareStatement("select "+campo+" from log_usuario group by "+campo);
            ResultSet rs = ps.executeQuery();
            combobox.removeAll();
            combobox.addItem("Todos");
            if(rs!=null){
                while(rs.next()){
                    combobox.addItem(rs.getString(1));
                }
            }
            combobox.setSelectedItem("Todos");
        }catch(SQLException e){
            e.printStackTrace();
        }finally{
            try{con.close();}catch(SQLException e){}
        }
    }

    private JInternalFrame GraficoLinha(String chartTitle){
        JFreeChart lineChart = ChartFactory.createLineChart(
                    chartTitle,
                    "Data","Qtde. Acessos",
                    createDataset(),
                    PlotOrientation.VERTICAL,
                    true,true,false);

        ChartPanel chartPanel = new ChartPanel( lineChart );
        final JInternalFrame frame = new JInternalFrame("", true);
        ((BasicInternalFrameUI)frame.getUI()).setNorthPane(null);
        frame.setPreferredSize(new Dimension(620,204));
        chartPanel.setSize(frame.getWidth(), frame.getHeight());
        frame.getContentPane().add(chartPanel);
        return frame;
   }

   private DefaultCategoryDataset createDataset(){
        Connection con = new ConexaoStatement().getConnetion();
        DefaultCategoryDataset dataset = new DefaultCategoryDataset( );
        try{
          ResultSet result = carregaGrafico(con); 
            if(result!=null){
                while(result.next()){
                    String data = result.getString(1)+"/"+result.getString(2);
                    dataset.addValue(result.getInt(4), "Atualizações", data);
                }
            }
        }catch(SQLException e){
              e.printStackTrace();
        }finally{
            try{con.close();}catch(SQLException e){}
        }
        return dataset;
   }
    public ResultSet carregaGrafico(Connection con) throws SQLException{
        ResultSet rs;
        String sql = ("select " +
                    "extract(day from Data) as Dia, extract(month from Data) as Mes," +
                    "extract(year from Data) as Ano,count(cod) as Quantidade " +
                    "from log_usuario " +
                    "group by Data limit 10");
        PreparedStatement ps = con.prepareStatement(sql);
        return rs = ps.executeQuery();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgOrdenação;
    private javax.swing.JButton btExport;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnOk;
    private javax.swing.JComboBox<String> cbCliente;
    private javax.swing.JComboBox<String> cbDepartamento;
    private javax.swing.JComboBox<String> cbMenu;
    private javax.swing.JComboBox<String> cbOrganizar;
    private javax.swing.JComboBox<String> cbUsuario;
    private com.michaelbaranov.microba.calendar.DatePicker data1;
    private com.michaelbaranov.microba.calendar.DatePicker data2;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JDesktopPane jDkBody;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JRadioButton rbCrescente;
    private javax.swing.JRadioButton rbDecrescente;
    private javax.swing.JTable tb_acesso;
    // End of variables declaration//GEN-END:variables
    private boolean tratarData(){
        if(data1.getDate().getTime()>data2.getDate().getTime()){
            JOptionPane.showMessageDialog(null, "Data informada está incorreta!");
            return false;
        }
        return true;
    }
    //pega seleção para exportar para excel
    public ResultSet pegaValores(Connection con){
        ResultSet rs=null;
        try
        {
            String sql = "select * from log_usuario where Data between ? and ? "
                +menu+usuario+cliente+departamento+
                "order by "+cbOrganizar.getSelectedItem()+""+ordem;
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setDate(1, new java.sql.Date(data1.getDate().getTime()));
            ps.setDate(2, new java.sql.Date(data2.getDate().getTime()));
            return rs = ps.executeQuery();
        }catch (SQLException erro){
            JOptionPane.showMessageDialog(null,"Erro ao listar tabela "+erro);
        }
        return rs;
    }
    
    private void preencher_jtable(){
        tb_acesso.getColumnModel().getColumn(0);
        tb_acesso.getColumnModel().getColumn(1);
        tb_acesso.getColumnModel().getColumn(2);
        tb_acesso.getColumnModel().getColumn(3);
        tb_acesso.getColumnModel().getColumn(4);
        tb_acesso.getColumnModel().getColumn(5);
        tb_acesso.getColumnModel().getColumn(6);
        tb_acesso.getColumnModel().getColumn(7);
        tb_acesso.getColumnModel().getColumn(8);
        tb_acesso.getColumnModel().getColumn(9);
        
        Connection con = new ConexaoStatement().getConnetion();
        String sql = "select * from log_usuario where Data between ? and ? "
                +menu+usuario+cliente+departamento+
                "order by "+cbOrganizar.getSelectedItem()+""+ordem;
        DefaultTableModel modelo = (DefaultTableModel)tb_acesso.getModel();
        for(int i=modelo.getRowCount()-1;i>=0;i--)
            modelo.removeRow(i);
        try
        {
            PreparedStatement ps = con.prepareStatement(sql);
            ps.setDate(1, new java.sql.Date(data1.getDate().getTime()));
            ps.setDate(2, new java.sql.Date(data2.getDate().getTime()));
            ResultSet rs = ps.executeQuery();
            if(rs!=null){
                while (rs.next())
                    modelo.addRow(new Object [] {
                        formatarData(rs.getDate("Data")),
                        rs.getString("Apelido"),
                        rs.getString("Cliente"),
                        formatarHora(rs.getString("Hora")),
                        rs.getString("Usuario"),
                        rs.getString("Departamento"),
                        rs.getString("Acao"),
                        rs.getString("Menu"),
                        rs.getString("Tela"),
                        rs.getString("Descricao")
                    });
            }
        }catch (SQLException erro){
            JOptionPane.showMessageDialog(null,"Erro ao listar tabela "+erro);
        }finally{try{con.close();}catch(SQLException e){}}
    }
    public String formatarData(Date data){
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyy");
        return sdf.format(data);
    }
    public String formatarHora(String hora){
        return hora.substring(0, 5);
    }
}
